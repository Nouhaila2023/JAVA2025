**Premera Parte **

.peek(System.out::println)
⚖️ ما الفرق بين peek() و forEach()؟

peek()	                        forEach()
يُستخدم داخل سلسلة الـ Stream	            يُستخدم في نهاية الـ Stream
لا يوقف الـ Stream	يوقف السلسلة (عملية نهائية)
يرجع Stream جديد	 لا يرجع أي قيمة (void)

⚠️ ملاحظة مهمة:
peek() لا يعمل لوحده. لأنه جزء من سلسلة كسولة (lazy stream)، لن يتم تنفيذه إلا إذا وضعت في النهاية عملية نهائية مثل:
.collect(...)
.forEach(...)
.count()

بدون هذه الخطوات، Java لن تنفّذ أي شيء في السلسلة، ولن ترى أي طباعة من peek()

****************************************************************************
collect(Collectors.toSet());


🔁 collect(...)
هو عملية نهائية (terminal operation) في الـ Stream.
وظيفته: جمع العناصر الموجودة في السلسلة (stream) وتحويلها إلى مجموعة بيانات مثل List أو Set أو Map.


🧰 Collectors.toSet()
هو جامع (collector) جاهز من مكتبة Java.
يُستخدم لتحويل العناصر إلى Set.
أي: يجمع العناصر بدون تكرار (لأن الـ Set لا يسمح بتكرار القيم).

📌 لماذا نستخدم toSet()؟
لو كنت تريد قائمة بدون عناصر مكررة.
لو يهمك أن تكون المجموعة غير مرتبة (في العادة HashSet).
مثال: عند توليد أرقام عشوائية وتريد أن تحتفظ فقط بالقيم المختلفة

جميل! 😄 راح أشرح لك الآن الفرق **بشكل عملي** بين:

- `Collectors.toSet()`
- `Collectors.toList()`

وبعدين أوريك كيف تسوي **Map باستخدام `collect()`**.

---

## 🆚 الفرق بين `toSet()` و `toList()`

### ✅ `toList()`:
يجمع العناصر في **قائمة (List)**:
- **يسمح بالتكرار**
- **يحافظ على الترتيب** (مثل ما أدخلت العناصر بالضبط)

```java
List<String> nombres = Stream.of("Ali", "Sara", "Ali", "Omar")
    .collect(Collectors.toList());

System.out.println(nombres);
```

🟢 **النتيجة:**
```
[Ali, Sara, Ali, Omar]
```

> تم تكرار "Ali" وظهر بنفس الترتيب.

---

### ✅ `toSet()`:
يجمع العناصر في **مجموعة (Set)**:
- **لا يسمح بالتكرار**
- **الترتيب غير مضمون**

```java
Set<String> nombres = Stream.of("Ali", "Sara", "Ali", "Omar")
    .collect(Collectors.toSet());

System.out.println(nombres);
```

🟡 **النتيجة:**
```
[Ali, Sara, Omar] // أو بترتيب مختلف حسب تنفيذ الـ JVM
```

> تم حذف التكرار، والنتيجة غير مرتبة.

---

## 🗺️ إنشاء `Map` باستخدام `collect(Collectors.toMap())`

لو عندك قائمة من كائنات وتبغى تعمل منها `Map`، تستخدم `toMap()`.

### 🎯 مثال: تحويل قائمة `Persona` إلى Map
```java
List<Persona> personas = List.of(
    new Persona("Ali", "ali@mail.com"),
    new Persona("Sara", "sara@mail.com")
);

Map<String, String> nombreEmailMap = personas.stream()
    .collect(Collectors.toMap(
        Persona::getNombre,    // المفتاح (key)
        Persona::getEmail      // القيمة (value)
    ));

System.out.println(nombreEmailMap);
```

🔷 **النتيجة:**
```java
{Ali=ali@mail.com, Sara=sara@mail.com}
```

> أخذنا الاسم كـ **مفتاح (key)**، والإيميل كـ **قيمة (value)**.

---

📌 ملاحظات:
- `toMap()` يحتاج مفتاح وقيمة.
- لو فيه مفتاحين مكررين، لازم تعالجها (أو بتصير Exception).
- تقدر تضيف معالج للـ duplicados مثل:
```java

.toMap(
    Persona::getNombre,
    Persona::getEmail,
    (email1, email2) -> email1 // إذا تكرر الاسم، خذ أول إيميل
)
```

---

تبغى أشرح كيف تستخدم `toMap()` لكن مع قائمة بسيطة من Strings؟ أو تبيني أساعدك تبني `Map` أكثر تعقيدًا مثل `Map<String, List<Persona>>`؟

